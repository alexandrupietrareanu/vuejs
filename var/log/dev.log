[2023-06-28T12:24:25.390960+03:00] php.DEBUG: Warning: include(/var/www/html/vue/var/cache/de_/App_KernelDevDebugContainer.php): Failed to open stream: No such file or directory {"exception":{"Symfony\\Component\\ErrorHandler\\Exception\\SilencedErrorContext":{"severity":2,"file":"/var/www/html/vue/vendor/symfony/http-kernel/Kernel.php","line":461,"trace":[{"file":"/var/www/html/vue/vendor/symfony/http-kernel/Kernel.php","line":461,"function":"include"}],"count":1}}} []
[2023-06-28T12:24:25.391887+03:00] php.DEBUG: Warning: include(): Failed opening '/var/www/html/vue/var/cache/de_/App_KernelDevDebugContainer.php' for inclusion (include_path='.:/usr/share/php') [] []
[2023-06-28T12:24:26.596431+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2023-06-28T12:24:26.596671+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2023-06-28T12:24:26.597244+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2023-06-28T12:24:26.597395+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2023-06-28T12:24:26.598650+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:34)"} []
[2023-06-28T12:24:26.598829+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:82)"} []
[2023-06-28T12:24:26.598956+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:105)"} []
[2023-06-28T12:24:26.599075+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:122)"} []
[2023-06-28T12:24:26.599193+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:62)"} []
[2023-06-28T12:24:26.599314+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:91)"} []
[2023-06-28T12:24:26.599436+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:99)"} []
[2023-06-28T12:24:26.599551+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:54)"} []
[2023-06-28T12:24:26.599895+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:41)"} []
[2023-06-28T12:24:26.600025+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:49)"} []
[2023-06-28T12:24:26.600142+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:57)"} []
[2023-06-28T12:24:26.600263+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:65)"} []
[2023-06-28T12:24:26.600377+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:73)"} []
[2023-06-28T12:24:26.600491+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:81)"} []
[2023-06-28T12:24:26.600604+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:89)"} []
[2023-06-28T12:24:26.600716+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:97)"} []
[2023-06-28T12:24:26.723642+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:24:26.723889+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:24:26.724028+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:24:26.724329+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:24:26.724518+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:24:26.724637+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:24:26.725400+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:24:26.725535+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:24:26.725728+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:24:26.725852+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:35:05.083812+03:00] php.DEBUG: Warning: include(/var/www/html/vue/var/cache/de_/App_KernelDevDebugContainer.php): Failed to open stream: No such file or directory {"exception":{"Symfony\\Component\\ErrorHandler\\Exception\\SilencedErrorContext":{"severity":2,"file":"/var/www/html/vue/vendor/symfony/http-kernel/Kernel.php","line":461,"trace":[{"file":"/var/www/html/vue/vendor/symfony/http-kernel/Kernel.php","line":461,"function":"include"}],"count":1}}} []
[2023-06-28T12:35:05.084186+03:00] php.DEBUG: Warning: include(): Failed opening '/var/www/html/vue/var/cache/de_/App_KernelDevDebugContainer.php' for inclusion (include_path='.:/usr/share/php') [] []
[2023-06-28T12:35:05.551608+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2023-06-28T12:35:05.551703+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2023-06-28T12:35:05.551914+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2023-06-28T12:35:05.551972+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2023-06-28T12:35:05.552429+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:34)"} []
[2023-06-28T12:35:05.552502+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:82)"} []
[2023-06-28T12:35:05.552552+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:105)"} []
[2023-06-28T12:35:05.552597+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:122)"} []
[2023-06-28T12:35:05.552644+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:62)"} []
[2023-06-28T12:35:05.552691+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:91)"} []
[2023-06-28T12:35:05.552740+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:99)"} []
[2023-06-28T12:35:05.552785+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:54)"} []
[2023-06-28T12:35:05.552918+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:41)"} []
[2023-06-28T12:35:05.552970+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:49)"} []
[2023-06-28T12:35:05.553016+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:57)"} []
[2023-06-28T12:35:05.553063+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:65)"} []
[2023-06-28T12:35:05.553107+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:73)"} []
[2023-06-28T12:35:05.553151+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:81)"} []
[2023-06-28T12:35:05.553194+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:89)"} []
[2023-06-28T12:35:05.553237+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:97)"} []
[2023-06-28T12:35:05.602195+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:35:05.602303+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:35:05.602355+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:35:05.602473+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:35:05.602553+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:35:05.602602+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:35:05.602909+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:35:05.602962+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:35:05.603037+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:35:05.603085+03:00] php.INFO: Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: trim(): Passing null to parameter #1 ($string) of type string is deprecated at /var/www/html/vue/vendor/symfony/dependency-injection/Dumper/PhpDumper.php:2227)"} []
[2023-06-28T12:35:06.726202+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/finder/Finder.php:607)"} []
[2023-06-28T12:35:06.726654+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/finder/Finder.php:686)"} []
[2023-06-28T12:35:06.726835+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Iterator\RecursiveDirectoryIterator::getChildren() should either be compatible with RecursiveDirectoryIterator::getChildren(): RecursiveDirectoryIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Iterator\\RecursiveDirectoryIterator::getChildren() should either be compatible with RecursiveDirectoryIterator::getChildren(): RecursiveDirectoryIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:85)"} []
[2023-06-28T12:35:06.726894+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Iterator\RecursiveDirectoryIterator::rewind() should either be compatible with FilesystemIterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Iterator\\RecursiveDirectoryIterator::rewind() should either be compatible with FilesystemIterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:113)"} []
[2023-06-28T12:35:06.726942+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Iterator\RecursiveDirectoryIterator::current() should either be compatible with FilesystemIterator::current(): SplFileInfo|FilesystemIterator|string, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Iterator\\RecursiveDirectoryIterator::current() should either be compatible with FilesystemIterator::current(): SplFileInfo|FilesystemIterator|string, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/finder/Iterator/RecursiveDirectoryIterator.php:61)"} []
[2023-06-28T12:35:06.727079+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Iterator\ExcludeDirectoryFilterIterator::accept() should either be compatible with FilterIterator::accept(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Iterator\\ExcludeDirectoryFilterIterator::accept() should either be compatible with FilterIterator::accept(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:55)"} []
[2023-06-28T12:35:06.727138+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Iterator\ExcludeDirectoryFilterIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Iterator\\ExcludeDirectoryFilterIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:74)"} []
[2023-06-28T12:35:06.727183+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Iterator\ExcludeDirectoryFilterIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Iterator\\ExcludeDirectoryFilterIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/finder/Iterator/ExcludeDirectoryFilterIterator.php:79)"} []
[2023-06-28T12:35:06.727346+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.727477+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.727583+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.727672+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.727757+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.727893+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.728510+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.728618+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.728741+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.728949+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.729040+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.731340+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.731507+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.732101+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.732855+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.733099+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.733254+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.733678+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.734007+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.734377+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.734473+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.734597+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.734692+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.734831+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.734924+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:35:06.736278+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Iterator\FileTypeFilterIterator::accept() should either be compatible with FilterIterator::accept(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Iterator\\FileTypeFilterIterator::accept() should either be compatible with FilterIterator::accept(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/finder/Iterator/FileTypeFilterIterator.php:42)"} []
[2023-06-28T12:35:06.736414+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Iterator\DepthRangeFilterIterator::accept() should either be compatible with FilterIterator::accept(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Iterator\\DepthRangeFilterIterator::accept() should either be compatible with FilterIterator::accept(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/finder/Iterator/DepthRangeFilterIterator.php:41)"} []
[2023-06-28T12:35:06.736572+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Iterator\PathFilterIterator::accept() should either be compatible with FilterIterator::accept(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Iterator\\PathFilterIterator::accept() should either be compatible with FilterIterator::accept(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/finder/Iterator/PathFilterIterator.php:27)"} []
[2023-06-28T12:36:37.467737+03:00] php.INFO: Deprecated: Optional parameter $helperSet declared before required parameter $helperName is implicitly treated as a required parameter {"exception":"[object] (ErrorException(code: 0): Deprecated: Optional parameter $helperSet declared before required parameter $helperName is implicitly treated as a required parameter at /var/www/html/vue/vendor/doctrine/migrations/lib/Doctrine/Migrations/Configuration/Connection/Loader/ConnectionHelperLoader.php:25)"} []
[2023-06-28T12:36:37.470086+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::exec($sql) should either be compatible with PDO::exec(string $statement): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::exec($sql) should either be compatible with PDO::exec(string $statement): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:49)"} []
[2023-06-28T12:36:37.470159+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::lastInsertId($name = null) should either be compatible with PDO::lastInsertId(?string $name = null): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::lastInsertId($name = null) should either be compatible with PDO::lastInsertId(?string $name = null): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:98)"} []
[2023-06-28T12:36:37.470214+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::prepare($sql, $driverOptions = []) should either be compatible with PDO::prepare(string $query, array $options = []): PDOStatement|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::prepare($sql, $driverOptions = []) should either be compatible with PDO::prepare(string $query, array $options = []): PDOStatement|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:75)"} []
[2023-06-28T12:36:37.470262+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::quote($value, $type = Doctrine\DBAL\ParameterType::STRING) should either be compatible with PDO::quote(string $string, int $type = PDO::PARAM_STR): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::quote($value, $type = Doctrine\\DBAL\\ParameterType::STRING) should either be compatible with PDO::quote(string $string, int $type = PDO::PARAM_STR): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:90)"} []
[2023-06-28T12:36:37.470309+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOQueryImplementation::query(?string $query = null, ?int $fetchMode = null, mixed ...$fetchModeArgs) should either be compatible with PDO::query(string $query, ?int $fetchMode = null, mixed ...$fetchModeArgs): PDOStatement|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOQueryImplementation::query(?string $query = null, ?int $fetchMode = null, mixed ...$fetchModeArgs) should either be compatible with PDO::query(string $query, ?int $fetchMode = null, mixed ...$fetchModeArgs): PDOStatement|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOQueryImplementation.php:20)"} []
[2023-06-28T12:36:37.471226+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::bindParam($param, &$variable, $type = Doctrine\DBAL\ParameterType::STRING, $length = null, $driverOptions = null) should either be compatible with PDOStatement::bindParam(string|int $param, mixed &$var, int $type = PDO::PARAM_STR, int $maxLength = 0, mixed $driverOptions = null): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::bindParam($param, &$variable, $type = Doctrine\\DBAL\\ParameterType::STRING, $length = null, $driverOptions = null) should either be compatible with PDOStatement::bindParam(string|int $param, mixed &$var, int $type = PDO::PARAM_STR, int $maxLength = 0, mixed $driverOptions = null): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:82)"} []
[2023-06-28T12:36:37.471311+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::bindValue($param, $value, $type = Doctrine\DBAL\ParameterType::STRING) should either be compatible with PDOStatement::bindValue(string|int $param, mixed $value, int $type = PDO::PARAM_STR): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::bindValue($param, $value, $type = Doctrine\\DBAL\\ParameterType::STRING) should either be compatible with PDOStatement::bindValue(string|int $param, mixed $value, int $type = PDO::PARAM_STR): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:62)"} []
[2023-06-28T12:36:37.471371+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::closeCursor() should either be compatible with PDOStatement::closeCursor(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::closeCursor() should either be compatible with PDOStatement::closeCursor(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:98)"} []
[2023-06-28T12:36:37.471426+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::execute($params = null) should either be compatible with PDOStatement::execute(?array $params = null): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::execute($params = null) should either be compatible with PDOStatement::execute(?array $params = null): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:112)"} []
[2023-06-28T12:36:37.471486+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::fetch($fetchMode = null, $cursorOrientation = PDO::FETCH_ORI_NEXT, $cursorOffset = 0) should either be compatible with PDOStatement::fetch(int $mode = PDO::FETCH_DEFAULT, int $cursorOrientation = PDO::FETCH_ORI_NEXT, int $cursorOffset = 0): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::fetch($fetchMode = null, $cursorOrientation = PDO::FETCH_ORI_NEXT, $cursorOffset = 0) should either be compatible with PDOStatement::fetch(int $mode = PDO::FETCH_DEFAULT, int $cursorOrientation = PDO::FETCH_ORI_NEXT, int $cursorOffset = 0): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:126)"} []
[2023-06-28T12:36:37.471538+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::fetchColumn($columnIndex = 0) should either be compatible with PDOStatement::fetchColumn(int $column = 0): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::fetchColumn($columnIndex = 0) should either be compatible with PDOStatement::fetchColumn(int $column = 0): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:146)"} []
[2023-06-28T12:36:37.471591+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatementImplementations::fetchAll($mode = null, ...$args) should either be compatible with PDOStatement::fetchAll(int $mode = PDO::FETCH_DEFAULT, mixed ...$args): array, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatementImplementations::fetchAll($mode = null, ...$args) should either be compatible with PDOStatement::fetchAll(int $mode = PDO::FETCH_DEFAULT, mixed ...$args): array, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatementImplementations.php:36)"} []
[2023-06-28T12:36:37.474902+03:00] doctrine.DEBUG: SHOW FULL TABLES WHERE Table_type = 'BASE TABLE' [] []
[2023-06-28T12:36:37.479267+03:00] doctrine.DEBUG: CREATE TABLE migration_versions (version VARCHAR(14) NOT NULL, executed_at DATETIME NOT NULL COMMENT '(DC2Type:datetime_immutable)', PRIMARY KEY(version)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB [] []
[2023-06-28T12:36:37.488154+03:00] doctrine.DEBUG: SELECT COLUMN_NAME AS Field, COLUMN_TYPE AS Type, IS_NULLABLE AS `Null`, COLUMN_KEY AS `Key`, COLUMN_DEFAULT AS `Default`, EXTRA AS Extra, COLUMN_COMMENT AS Comment, CHARACTER_SET_NAME AS CharacterSet, COLLATION_NAME AS Collation FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'vuejs' AND TABLE_NAME = 'migration_versions' ORDER BY ORDINAL_POSITION ASC [] []
[2023-06-28T12:36:37.489300+03:00] doctrine.DEBUG: SELECT DISTINCT k.`CONSTRAINT_NAME`, k.`COLUMN_NAME`, k.`REFERENCED_TABLE_NAME`, k.`REFERENCED_COLUMN_NAME` /*!50116 , c.update_rule, c.delete_rule */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON   c.constraint_name = k.constraint_name AND   c.table_name = 'migration_versions' */ WHERE k.table_name = 'migration_versions' AND k.table_schema = 'vuejs' /*!50116 AND c.constraint_schema = 'vuejs' */ AND k.`REFERENCED_COLUMN_NAME` is not NULL [] []
[2023-06-28T12:36:37.490618+03:00] doctrine.DEBUG: SELECT NON_UNIQUE AS Non_Unique, INDEX_NAME AS Key_name, COLUMN_NAME AS Column_Name, SUB_PART AS Sub_Part, INDEX_TYPE AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_NAME = 'migration_versions' AND TABLE_SCHEMA = 'vuejs' ORDER BY SEQ_IN_INDEX ASC [] []
[2023-06-28T12:36:37.491393+03:00] doctrine.DEBUG: SELECT ENGINE, AUTO_INCREMENT, TABLE_COLLATION, TABLE_COMMENT, CREATE_OPTIONS FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA = DATABASE() AND TABLE_NAME = 'migration_versions' [] []
[2023-06-28T12:36:37.492676+03:00] doctrine.DEBUG: SELECT version FROM migration_versions [] []
[2023-06-28T12:36:40.423668+03:00] doctrine.DEBUG: SELECT version FROM migration_versions WHERE version IN ('20191206161148', '20200127144611') ORDER BY version DESC LIMIT 1 [] []
[2023-06-28T12:36:40.425564+03:00] doctrine.DEBUG: SELECT version FROM migration_versions [] []
[2023-06-28T12:36:40.428156+03:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2023-06-28T12:36:40.437518+03:00] php.INFO: User Deprecated: getRawData only returns the first dataset loaded, which may not be what you expect. Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. {"exception":"[object] (ErrorException(code: 0): User Deprecated: getRawData only returns the first dataset loaded, which may not be what you expect. Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. at /var/www/html/vue/vendor/composer/InstalledVersions.php:262)"} []
[2023-06-28T12:36:40.448867+03:00] doctrine.DEBUG: CREATE TABLE category (id INT AUTO_INCREMENT NOT NULL, name VARCHAR(100) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB [] []
[2023-06-28T12:36:40.457968+03:00] doctrine.DEBUG: CREATE TABLE purchase_item (id INT AUTO_INCREMENT NOT NULL, purchase_id INT NOT NULL, product_id INT NOT NULL, color_id INT DEFAULT NULL, quantity INT NOT NULL, INDEX IDX_6FA8ED7D558FBEB9 (purchase_id), INDEX IDX_6FA8ED7D4584665A (product_id), INDEX IDX_6FA8ED7D7ADA1FB5 (color_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB [] []
[2023-06-28T12:36:40.471326+03:00] doctrine.DEBUG: CREATE TABLE product (id INT AUTO_INCREMENT NOT NULL, category_id INT NOT NULL, name VARCHAR(255) NOT NULL, description LONGTEXT DEFAULT NULL, brand VARCHAR(20) NOT NULL, weight DOUBLE PRECISION DEFAULT NULL, price INT NOT NULL, stock_quantity INT NOT NULL, INDEX IDX_D34A04AD12469DE2 (category_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB [] []
[2023-06-28T12:36:40.480714+03:00] doctrine.DEBUG: CREATE TABLE product_color (product_id INT NOT NULL, color_id INT NOT NULL, INDEX IDX_C70A33B54584665A (product_id), INDEX IDX_C70A33B57ADA1FB5 (color_id), PRIMARY KEY(product_id, color_id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB [] []
[2023-06-28T12:36:40.492000+03:00] doctrine.DEBUG: CREATE TABLE purchase (id INT AUTO_INCREMENT NOT NULL, customer_name VARCHAR(255) NOT NULL, customer_email VARCHAR(255) NOT NULL, customer_address VARCHAR(255) NOT NULL, customer_zip VARCHAR(20) DEFAULT NULL, customer_city VARCHAR(255) NOT NULL, customer_phone VARCHAR(20) DEFAULT NULL, is_shipped TINYINT(1) NOT NULL, created_at DATETIME NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB [] []
[2023-06-28T12:36:40.500438+03:00] doctrine.DEBUG: CREATE TABLE user (id INT AUTO_INCREMENT NOT NULL, email VARCHAR(180) NOT NULL, roles JSON NOT NULL, password VARCHAR(255) NOT NULL, UNIQUE INDEX UNIQ_8D93D649E7927C74 (email), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB [] []
[2023-06-28T12:36:40.511099+03:00] doctrine.DEBUG: CREATE TABLE color (id INT AUTO_INCREMENT NOT NULL, name VARCHAR(100) NOT NULL, hex_color VARCHAR(6) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB [] []
[2023-06-28T12:36:40.519261+03:00] doctrine.DEBUG: ALTER TABLE purchase_item ADD CONSTRAINT FK_6FA8ED7D558FBEB9 FOREIGN KEY (purchase_id) REFERENCES purchase (id) [] []
[2023-06-28T12:36:40.542795+03:00] doctrine.DEBUG: ALTER TABLE purchase_item ADD CONSTRAINT FK_6FA8ED7D4584665A FOREIGN KEY (product_id) REFERENCES product (id) [] []
[2023-06-28T12:36:40.564951+03:00] doctrine.DEBUG: ALTER TABLE purchase_item ADD CONSTRAINT FK_6FA8ED7D7ADA1FB5 FOREIGN KEY (color_id) REFERENCES color (id) [] []
[2023-06-28T12:36:40.585683+03:00] doctrine.DEBUG: ALTER TABLE product ADD CONSTRAINT FK_D34A04AD12469DE2 FOREIGN KEY (category_id) REFERENCES category (id) [] []
[2023-06-28T12:36:40.603833+03:00] doctrine.DEBUG: ALTER TABLE product_color ADD CONSTRAINT FK_C70A33B54584665A FOREIGN KEY (product_id) REFERENCES product (id) ON DELETE CASCADE [] []
[2023-06-28T12:36:40.623430+03:00] doctrine.DEBUG: ALTER TABLE product_color ADD CONSTRAINT FK_C70A33B57ADA1FB5 FOREIGN KEY (color_id) REFERENCES color (id) ON DELETE CASCADE [] []
[2023-06-28T12:36:40.641340+03:00] doctrine.DEBUG: INSERT INTO migration_versions (version, executed_at) VALUES (?, ?) ["20191206161148","2023-06-28 09:36:40"] []
[2023-06-28T12:36:40.643320+03:00] doctrine.DEBUG: ALTER TABLE product ADD image_filename VARCHAR(255) NOT NULL [] []
[2023-06-28T12:36:40.651762+03:00] doctrine.DEBUG: INSERT INTO migration_versions (version, executed_at) VALUES (?, ?) ["20200127144611","2023-06-28 09:36:40"] []
[2023-06-28T12:36:55.330379+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::exec($sql) should either be compatible with PDO::exec(string $statement): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::exec($sql) should either be compatible with PDO::exec(string $statement): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:49)"} []
[2023-06-28T12:36:55.331769+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::lastInsertId($name = null) should either be compatible with PDO::lastInsertId(?string $name = null): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::lastInsertId($name = null) should either be compatible with PDO::lastInsertId(?string $name = null): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:98)"} []
[2023-06-28T12:36:55.331844+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::prepare($sql, $driverOptions = []) should either be compatible with PDO::prepare(string $query, array $options = []): PDOStatement|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::prepare($sql, $driverOptions = []) should either be compatible with PDO::prepare(string $query, array $options = []): PDOStatement|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:75)"} []
[2023-06-28T12:36:55.331895+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::quote($value, $type = Doctrine\DBAL\ParameterType::STRING) should either be compatible with PDO::quote(string $string, int $type = PDO::PARAM_STR): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::quote($value, $type = Doctrine\\DBAL\\ParameterType::STRING) should either be compatible with PDO::quote(string $string, int $type = PDO::PARAM_STR): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:90)"} []
[2023-06-28T12:36:55.331951+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOQueryImplementation::query(?string $query = null, ?int $fetchMode = null, mixed ...$fetchModeArgs) should either be compatible with PDO::query(string $query, ?int $fetchMode = null, mixed ...$fetchModeArgs): PDOStatement|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOQueryImplementation::query(?string $query = null, ?int $fetchMode = null, mixed ...$fetchModeArgs) should either be compatible with PDO::query(string $query, ?int $fetchMode = null, mixed ...$fetchModeArgs): PDOStatement|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOQueryImplementation.php:20)"} []
[2023-06-28T12:36:55.333155+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::bindParam($param, &$variable, $type = Doctrine\DBAL\ParameterType::STRING, $length = null, $driverOptions = null) should either be compatible with PDOStatement::bindParam(string|int $param, mixed &$var, int $type = PDO::PARAM_STR, int $maxLength = 0, mixed $driverOptions = null): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::bindParam($param, &$variable, $type = Doctrine\\DBAL\\ParameterType::STRING, $length = null, $driverOptions = null) should either be compatible with PDOStatement::bindParam(string|int $param, mixed &$var, int $type = PDO::PARAM_STR, int $maxLength = 0, mixed $driverOptions = null): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:82)"} []
[2023-06-28T12:36:55.333226+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::bindValue($param, $value, $type = Doctrine\DBAL\ParameterType::STRING) should either be compatible with PDOStatement::bindValue(string|int $param, mixed $value, int $type = PDO::PARAM_STR): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::bindValue($param, $value, $type = Doctrine\\DBAL\\ParameterType::STRING) should either be compatible with PDOStatement::bindValue(string|int $param, mixed $value, int $type = PDO::PARAM_STR): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:62)"} []
[2023-06-28T12:36:55.333278+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::closeCursor() should either be compatible with PDOStatement::closeCursor(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::closeCursor() should either be compatible with PDOStatement::closeCursor(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:98)"} []
[2023-06-28T12:36:55.333356+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::execute($params = null) should either be compatible with PDOStatement::execute(?array $params = null): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::execute($params = null) should either be compatible with PDOStatement::execute(?array $params = null): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:112)"} []
[2023-06-28T12:36:55.333598+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::fetch($fetchMode = null, $cursorOrientation = PDO::FETCH_ORI_NEXT, $cursorOffset = 0) should either be compatible with PDOStatement::fetch(int $mode = PDO::FETCH_DEFAULT, int $cursorOrientation = PDO::FETCH_ORI_NEXT, int $cursorOffset = 0): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::fetch($fetchMode = null, $cursorOrientation = PDO::FETCH_ORI_NEXT, $cursorOffset = 0) should either be compatible with PDOStatement::fetch(int $mode = PDO::FETCH_DEFAULT, int $cursorOrientation = PDO::FETCH_ORI_NEXT, int $cursorOffset = 0): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:126)"} []
[2023-06-28T12:36:55.333816+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::fetchColumn($columnIndex = 0) should either be compatible with PDOStatement::fetchColumn(int $column = 0): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::fetchColumn($columnIndex = 0) should either be compatible with PDOStatement::fetchColumn(int $column = 0): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:146)"} []
[2023-06-28T12:36:55.334070+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatementImplementations::fetchAll($mode = null, ...$args) should either be compatible with PDOStatement::fetchAll(int $mode = PDO::FETCH_DEFAULT, mixed ...$args): array, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatementImplementations::fetchAll($mode = null, ...$args) should either be compatible with PDOStatement::fetchAll(int $mode = PDO::FETCH_DEFAULT, mixed ...$args): array, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatementImplementations.php:36)"} []
[2023-06-28T12:36:55.334747+03:00] doctrine.DEBUG: "START TRANSACTION" [] []
[2023-06-28T12:36:55.352807+03:00] doctrine.DEBUG: DELETE FROM product_color [] []
[2023-06-28T12:36:55.354055+03:00] doctrine.DEBUG: DELETE FROM purchase_item [] []
[2023-06-28T12:36:55.354792+03:00] doctrine.DEBUG: DELETE FROM purchase [] []
[2023-06-28T12:36:55.355274+03:00] doctrine.DEBUG: DELETE FROM product [] []
[2023-06-28T12:36:55.355498+03:00] doctrine.DEBUG: DELETE FROM color [] []
[2023-06-28T12:36:55.356000+03:00] doctrine.DEBUG: DELETE FROM category [] []
[2023-06-28T12:36:55.356302+03:00] doctrine.DEBUG: DELETE FROM user [] []
[2023-06-28T12:36:55.357144+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\ArrayCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\ArrayCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/ArrayCollection.php:277)"} []
[2023-06-28T12:36:55.357218+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\ArrayCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\ArrayCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/ArrayCollection.php:318)"} []
[2023-06-28T12:36:55.357267+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\ArrayCollection::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\ArrayCollection::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/ArrayCollection.php:167)"} []
[2023-06-28T12:36:55.357315+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\ArrayCollection::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\ArrayCollection::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/ArrayCollection.php:179)"} []
[2023-06-28T12:36:55.357358+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\ArrayCollection::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\ArrayCollection::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/ArrayCollection.php:189)"} []
[2023-06-28T12:36:55.357401+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\ArrayCollection::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\ArrayCollection::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/ArrayCollection.php:207)"} []
[2023-06-28T12:36:55.358303+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:36:55.358781+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:36:55.359475+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:36:55.359690+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:36:55.360027+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:36:55.360173+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:36:55.360421+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:36:55.360676+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:36:55.360962+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:36:55.361499+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:36:55.362116+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:36:55.362618+03:00] php.INFO: Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: fopen(): Passing null to parameter #3 ($use_include_path) of type bool is deprecated at /var/www/html/vue/vendor/symfony/filesystem/Filesystem.php:58)"} []
[2023-06-28T12:36:55.363555+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\AbstractLazyCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\AbstractLazyCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/AbstractLazyCollection.php:31)"} []
[2023-06-28T12:36:55.363622+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\AbstractLazyCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\AbstractLazyCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/AbstractLazyCollection.php:279)"} []
[2023-06-28T12:36:55.363676+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\AbstractLazyCollection::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\AbstractLazyCollection::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/AbstractLazyCollection.php:291)"} []
[2023-06-28T12:36:55.363725+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\AbstractLazyCollection::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\AbstractLazyCollection::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/AbstractLazyCollection.php:307)"} []
[2023-06-28T12:36:55.363772+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\AbstractLazyCollection::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\AbstractLazyCollection::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/AbstractLazyCollection.php:321)"} []
[2023-06-28T12:36:55.363818+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\AbstractLazyCollection::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\AbstractLazyCollection::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/AbstractLazyCollection.php:332)"} []
[2023-06-28T12:36:55.366242+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Statement::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Statement::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Statement.php:252)"} []
[2023-06-28T12:36:55.366384+03:00] doctrine.DEBUG: INSERT INTO category (name) VALUES (?) {"1":"Office Supplies"} []
[2023-06-28T12:36:55.366899+03:00] doctrine.DEBUG: INSERT INTO category (name) VALUES (?) {"1":"Furniture"} []
[2023-06-28T12:36:55.367260+03:00] doctrine.DEBUG: INSERT INTO category (name) VALUES (?) {"1":"Breakroom"} []
[2023-06-28T12:36:55.367494+03:00] doctrine.DEBUG: INSERT INTO category (name) VALUES (?) {"1":"Snacks"} []
[2023-06-28T12:36:55.367996+03:00] doctrine.DEBUG: INSERT INTO product (name, description, brand, weight, price, stock_quantity, image_filename, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"Floppy disk","2":"With 1.44 mb of storage sp [...]","3":"Rest at Work","4":null,"5":2700,"6":73,"7":"floppy-disc.png","8":1} []
[2023-06-28T12:36:55.368242+03:00] doctrine.DEBUG: INSERT INTO product (name, description, brand, weight, price, stock_quantity, image_filename, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"Blank CD's","2":"Want to share your favorit [...]","3":"Faux-Trendster","4":null,"5":3700,"6":100,"7":"blank-cds.png","8":1} []
[2023-06-28T12:36:55.368409+03:00] doctrine.DEBUG: INSERT INTO product (name, description, brand, weight, price, stock_quantity, image_filename, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"Disappearing Ink Pens","2":"Write your daily to do lis [...]","3":"Rest at Work","4":null,"5":2300,"6":73,"7":"pen.png","8":1} []
[2023-06-28T12:36:55.368553+03:00] doctrine.DEBUG: INSERT INTO product (name, description, brand, weight, price, stock_quantity, image_filename, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"Papers","2":"Fresh stack of newspapers  [...]","3":"Low End Luxury","4":null,"5":2500,"6":89,"7":"papers.png","8":1} []
[2023-06-28T12:36:55.368694+03:00] doctrine.DEBUG: INSERT INTO product (name, description, brand, weight, price, stock_quantity, image_filename, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"Inflatable Sofa","2":"Comfortable? No. Easy to m [...]","3":"Faux-Trendster","4":null,"5":2800,"6":32,"7":"inflatable-sofa.png","8":2} []
[2023-06-28T12:36:55.368827+03:00] doctrine.DEBUG: INSERT INTO product (name, description, brand, weight, price, stock_quantity, image_filename, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"Lamp","2":"Let this lamp light up your day!","3":"Low End Luxury","4":null,"5":1200,"6":70,"7":"dog-lamp.png","8":2} []
[2023-06-28T12:36:55.368956+03:00] doctrine.DEBUG: INSERT INTO product (name, description, brand, weight, price, stock_quantity, image_filename, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"Hammock","2":"Feel sluggish part way thr [...]","3":"Low End Luxury","4":null,"5":4700,"6":18,"7":"hammock.png","8":2} []
[2023-06-28T12:36:55.369084+03:00] doctrine.DEBUG: INSERT INTO product (name, description, brand, weight, price, stock_quantity, image_filename, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"Art (Velvis)","2":"Art with texture - there i [...]","3":"Faux-Trendster","4":null,"5":3800,"6":90,"7":"velvis.png","8":2} []
[2023-06-28T12:36:55.369291+03:00] doctrine.DEBUG: INSERT INTO product (name, description, brand, weight, price, stock_quantity, image_filename, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"Fake Plant","2":"Bring a little life but no [...]","3":"Rest at Work","4":null,"5":4100,"6":74,"7":"indoor-plant.png","8":2} []
[2023-06-28T12:36:55.369478+03:00] doctrine.DEBUG: INSERT INTO product (name, description, brand, weight, price, stock_quantity, image_filename, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"Popcorn Machine","2":"Your employees are *alread [...]","3":"Rest at Work","4":null,"5":2200,"6":100,"7":"popcorn.png","8":3} []
[2023-06-28T12:36:55.369619+03:00] doctrine.DEBUG: INSERT INTO product (name, description, brand, weight, price, stock_quantity, image_filename, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"Pour-over Spigot","2":"With our affordable pour-o [...]","3":"Rest at Work","4":null,"5":1800,"6":23,"7":"spigot.png","8":3} []
[2023-06-28T12:36:55.369751+03:00] doctrine.DEBUG: INSERT INTO product (name, description, brand, weight, price, stock_quantity, image_filename, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?) {"1":"3000 Piece Puzzle","2":" Assorted pieces, may not  [...]","3":"Low End Luxury","4":null,"5":4300,"6":13,"7":"puzzle.png","8":3} []
[2023-06-28T12:36:55.370190+03:00] doctrine.DEBUG: INSERT INTO color (name, hex_color) VALUES (?, ?) {"1":"red","2":"ff0000"} []
[2023-06-28T12:36:55.370368+03:00] doctrine.DEBUG: INSERT INTO color (name, hex_color) VALUES (?, ?) {"1":"green","2":"00ff00"} []
[2023-06-28T12:36:55.370476+03:00] doctrine.DEBUG: INSERT INTO color (name, hex_color) VALUES (?, ?) {"1":"blue","2":"0000ff"} []
[2023-06-28T12:36:55.371254+03:00] doctrine.DEBUG: INSERT INTO product_color (product_id, color_id) VALUES (?, ?) [5,1] []
[2023-06-28T12:36:55.371638+03:00] doctrine.DEBUG: INSERT INTO product_color (product_id, color_id) VALUES (?, ?) [5,3] []
[2023-06-28T12:36:55.371806+03:00] doctrine.DEBUG: INSERT INTO product_color (product_id, color_id) VALUES (?, ?) [5,2] []
[2023-06-28T12:36:55.372049+03:00] doctrine.DEBUG: INSERT INTO product_color (product_id, color_id) VALUES (?, ?) [7,1] []
[2023-06-28T12:36:55.372182+03:00] doctrine.DEBUG: INSERT INTO product_color (product_id, color_id) VALUES (?, ?) [7,3] []
[2023-06-28T12:36:55.372296+03:00] doctrine.DEBUG: INSERT INTO product_color (product_id, color_id) VALUES (?, ?) [7,2] []
[2023-06-28T12:36:55.372429+03:00] doctrine.DEBUG: "COMMIT" [] []
[2023-06-28T12:39:16.180454+03:00] request.INFO: Matched route "app_homepage". {"route":"app_homepage","route_parameters":{"_route":"app_homepage","_controller":"App\\Controller\\ProductController::index"},"request_uri":"https://localhost:8000/","method":"GET"} []
[2023-06-28T12:39:16.184655+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2023-06-28T12:39:16.184734+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2023-06-28T12:39:16.185090+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2023-06-28T12:39:16.185149+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2023-06-28T12:39:16.186274+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:34)"} []
[2023-06-28T12:39:16.186361+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:82)"} []
[2023-06-28T12:39:16.186419+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:105)"} []
[2023-06-28T12:39:16.186467+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:122)"} []
[2023-06-28T12:39:16.186519+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:62)"} []
[2023-06-28T12:39:16.186574+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:91)"} []
[2023-06-28T12:39:16.186622+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:99)"} []
[2023-06-28T12:39:16.186667+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:54)"} []
[2023-06-28T12:39:16.186931+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:41)"} []
[2023-06-28T12:39:16.186982+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:49)"} []
[2023-06-28T12:39:16.187024+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:57)"} []
[2023-06-28T12:39:16.187066+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:65)"} []
[2023-06-28T12:39:16.187107+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:73)"} []
[2023-06-28T12:39:16.187151+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:81)"} []
[2023-06-28T12:39:16.187192+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:89)"} []
[2023-06-28T12:39:16.187233+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:97)"} []
[2023-06-28T12:39:16.190487+03:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"main","authenticators":1} []
[2023-06-28T12:39:16.190538+03:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"main","authenticator":"App\\Security\\LoginFormAuthenticator"} []
[2023-06-28T12:39:16.190571+03:00] security.DEBUG: Guard authenticator does not support the request. {"firewall_key":"main","authenticator":"App\\Security\\LoginFormAuthenticator"} []
[2023-06-28T12:39:16.194903+03:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2023-06-28T12:39:16.200652+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2023-06-28T12:39:16.200720+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:158)"} []
[2023-06-28T12:39:16.200774+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:163)"} []
[2023-06-28T12:39:16.200822+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:168)"} []
[2023-06-28T12:39:16.200865+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2023-06-28T12:39:16.200907+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2023-06-28T12:39:16.202579+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/http-foundation/Response.php:1267)"} []
[2023-06-28T12:39:16.204106+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/web-profiler-bundle/EventListener/WebDebugToolbarListener.php:106)"} []
[2023-06-28T12:39:16.417753+03:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"a24b72"},"request_uri":"https://localhost:8000/_wdt/a24b72","method":"GET"} []
[2023-06-28T12:39:16.419660+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2023-06-28T12:39:16.419740+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:158)"} []
[2023-06-28T12:39:16.419792+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:163)"} []
[2023-06-28T12:39:16.419838+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:168)"} []
[2023-06-28T12:39:16.419885+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2023-06-28T12:39:16.419929+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2023-06-28T12:39:16.426600+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:34)"} []
[2023-06-28T12:39:16.426681+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:82)"} []
[2023-06-28T12:39:16.426731+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:105)"} []
[2023-06-28T12:39:16.426777+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:122)"} []
[2023-06-28T12:39:16.426824+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:62)"} []
[2023-06-28T12:39:16.426871+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:91)"} []
[2023-06-28T12:39:16.426915+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:99)"} []
[2023-06-28T12:39:16.426956+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:54)"} []
[2023-06-28T12:39:16.427030+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:41)"} []
[2023-06-28T12:39:16.427076+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:49)"} []
[2023-06-28T12:39:16.427122+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:57)"} []
[2023-06-28T12:39:16.427165+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:65)"} []
[2023-06-28T12:39:16.427207+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:73)"} []
[2023-06-28T12:39:16.427248+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:81)"} []
[2023-06-28T12:39:16.427289+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:89)"} []
[2023-06-28T12:39:16.427334+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:97)"} []
[2023-06-28T12:39:16.427443+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2023-06-28T12:39:16.427490+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2023-06-28T12:39:16.427554+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2023-06-28T12:39:16.427599+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2023-06-28T12:39:16.437058+03:00] php.INFO: Deprecated: Return type of Twig\Markup::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Twig\\Markup::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/twig/twig/src/Markup.php:38)"} []
[2023-06-28T12:39:16.437145+03:00] php.INFO: Deprecated: Return type of Twig\Markup::jsonSerialize() should either be compatible with JsonSerializable::jsonSerialize(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Twig\\Markup::jsonSerialize() should either be compatible with JsonSerializable::jsonSerialize(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/twig/twig/src/Markup.php:43)"} []
[2023-06-28T12:39:16.463455+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/http-foundation/Response.php:1267)"} []
[2023-06-28T12:39:16.509039+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2023-06-28T12:39:16.509288+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:158)"} []
[2023-06-28T12:39:16.509358+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:163)"} []
[2023-06-28T12:39:16.509419+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:168)"} []
[2023-06-28T12:39:16.509482+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2023-06-28T12:39:16.509532+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2023-06-28T12:39:16.510764+03:00] request.ERROR: Uncaught PHP Exception Symfony\Component\HttpKernel\Exception\NotFoundHttpException: "No route found for "GET /favicon.ico" (from "https://localhost:8000/")" at /var/www/html/vue/vendor/symfony/http-kernel/EventListener/RouterListener.php line 136 {"exception":"[object] (Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException(code: 0): No route found for \"GET /favicon.ico\" (from \"https://localhost:8000/\") at /var/www/html/vue/vendor/symfony/http-kernel/EventListener/RouterListener.php:136)\n[previous exception] [object] (Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException(code: 0): No routes found for \"/favicon.ico/\". at /var/www/html/vue/vendor/symfony/routing/Matcher/Dumper/CompiledUrlMatcherTrait.php:70)"} []
[2023-06-28T12:39:16.533044+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:34)"} []
[2023-06-28T12:39:16.533134+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:82)"} []
[2023-06-28T12:39:16.533188+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:105)"} []
[2023-06-28T12:39:16.533243+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:122)"} []
[2023-06-28T12:39:16.533291+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:62)"} []
[2023-06-28T12:39:16.533337+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:91)"} []
[2023-06-28T12:39:16.533384+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:99)"} []
[2023-06-28T12:39:16.533428+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:54)"} []
[2023-06-28T12:39:16.533493+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:41)"} []
[2023-06-28T12:39:16.533540+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:49)"} []
[2023-06-28T12:39:16.533585+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:57)"} []
[2023-06-28T12:39:16.533629+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:65)"} []
[2023-06-28T12:39:16.533674+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:73)"} []
[2023-06-28T12:39:16.533717+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:81)"} []
[2023-06-28T12:39:16.533760+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:89)"} []
[2023-06-28T12:39:16.533802+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:97)"} []
[2023-06-28T12:39:16.533901+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2023-06-28T12:39:16.533970+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2023-06-28T12:39:16.534037+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2023-06-28T12:39:16.534084+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2023-06-28T12:39:16.535240+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/http-foundation/Response.php:1267)"} []
[2023-06-28T12:39:16.535787+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/web-profiler-bundle/EventListener/WebDebugToolbarListener.php:106)"} []
[2023-06-28T12:39:18.113443+03:00] request.INFO: Matched route "app_homepage". {"route":"app_homepage","route_parameters":{"_route":"app_homepage","_controller":"App\\Controller\\ProductController::index"},"request_uri":"https://localhost:8000/","method":"GET"} []
[2023-06-28T12:39:18.113765+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2023-06-28T12:39:18.113839+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2023-06-28T12:39:18.113925+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2023-06-28T12:39:18.113982+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2023-06-28T12:39:18.114100+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:34)"} []
[2023-06-28T12:39:18.114178+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:82)"} []
[2023-06-28T12:39:18.114249+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:105)"} []
[2023-06-28T12:39:18.114302+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:122)"} []
[2023-06-28T12:39:18.114345+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:62)"} []
[2023-06-28T12:39:18.114388+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:91)"} []
[2023-06-28T12:39:18.114430+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:99)"} []
[2023-06-28T12:39:18.114471+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:54)"} []
[2023-06-28T12:39:18.114533+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:41)"} []
[2023-06-28T12:39:18.114576+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:49)"} []
[2023-06-28T12:39:18.114619+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:57)"} []
[2023-06-28T12:39:18.114659+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:65)"} []
[2023-06-28T12:39:18.114700+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:73)"} []
[2023-06-28T12:39:18.114742+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:81)"} []
[2023-06-28T12:39:18.114785+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:89)"} []
[2023-06-28T12:39:18.114828+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:97)"} []
[2023-06-28T12:39:18.115142+03:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"main","authenticators":1} []
[2023-06-28T12:39:18.115190+03:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"main","authenticator":"App\\Security\\LoginFormAuthenticator"} []
[2023-06-28T12:39:18.115223+03:00] security.DEBUG: Guard authenticator does not support the request. {"firewall_key":"main","authenticator":"App\\Security\\LoginFormAuthenticator"} []
[2023-06-28T12:39:18.116920+03:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2023-06-28T12:39:18.118101+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2023-06-28T12:39:18.118390+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:158)"} []
[2023-06-28T12:39:18.118459+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:163)"} []
[2023-06-28T12:39:18.118522+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:168)"} []
[2023-06-28T12:39:18.118582+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2023-06-28T12:39:18.118643+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2023-06-28T12:39:18.119172+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/http-foundation/Response.php:1267)"} []
[2023-06-28T12:39:18.119955+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/web-profiler-bundle/EventListener/WebDebugToolbarListener.php:106)"} []
[2023-06-28T12:39:18.194221+03:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"7e9fe8"},"request_uri":"https://localhost:8000/_wdt/7e9fe8","method":"GET"} []
[2023-06-28T12:39:18.194940+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2023-06-28T12:39:18.195011+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:158)"} []
[2023-06-28T12:39:18.195063+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:163)"} []
[2023-06-28T12:39:18.195109+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:168)"} []
[2023-06-28T12:39:18.195154+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2023-06-28T12:39:18.195198+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2023-06-28T12:39:18.196162+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:34)"} []
[2023-06-28T12:39:18.196222+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:82)"} []
[2023-06-28T12:39:18.196268+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:105)"} []
[2023-06-28T12:39:18.196312+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:122)"} []
[2023-06-28T12:39:18.196355+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:62)"} []
[2023-06-28T12:39:18.196402+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:91)"} []
[2023-06-28T12:39:18.196446+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:99)"} []
[2023-06-28T12:39:18.196489+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:54)"} []
[2023-06-28T12:39:18.196553+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:41)"} []
[2023-06-28T12:39:18.196602+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:49)"} []
[2023-06-28T12:39:18.196684+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:57)"} []
[2023-06-28T12:39:18.196750+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:65)"} []
[2023-06-28T12:39:18.196821+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:73)"} []
[2023-06-28T12:39:18.196869+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:81)"} []
[2023-06-28T12:39:18.196925+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:89)"} []
[2023-06-28T12:39:18.196982+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:97)"} []
[2023-06-28T12:39:18.197243+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2023-06-28T12:39:18.197315+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2023-06-28T12:39:18.197442+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2023-06-28T12:39:18.197529+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2023-06-28T12:39:18.198854+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/http-foundation/Response.php:1267)"} []
[2023-06-28T12:39:18.885481+03:00] request.INFO: Matched route "app_homepage". {"route":"app_homepage","route_parameters":{"_route":"app_homepage","_controller":"App\\Controller\\ProductController::index"},"request_uri":"https://localhost:8000/","method":"GET"} []
[2023-06-28T12:39:18.885798+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2023-06-28T12:39:18.885869+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2023-06-28T12:39:18.885950+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2023-06-28T12:39:18.886001+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2023-06-28T12:39:18.886074+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:34)"} []
[2023-06-28T12:39:18.886127+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:82)"} []
[2023-06-28T12:39:18.886171+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:105)"} []
[2023-06-28T12:39:18.886230+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:122)"} []
[2023-06-28T12:39:18.886275+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:62)"} []
[2023-06-28T12:39:18.886319+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:91)"} []
[2023-06-28T12:39:18.886364+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:99)"} []
[2023-06-28T12:39:18.886407+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:54)"} []
[2023-06-28T12:39:18.886467+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:41)"} []
[2023-06-28T12:39:18.886522+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:49)"} []
[2023-06-28T12:39:18.886566+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:57)"} []
[2023-06-28T12:39:18.886611+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:65)"} []
[2023-06-28T12:39:18.886655+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:73)"} []
[2023-06-28T12:39:18.886699+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:81)"} []
[2023-06-28T12:39:18.886741+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:89)"} []
[2023-06-28T12:39:18.886784+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:97)"} []
[2023-06-28T12:39:18.887025+03:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"main","authenticators":1} []
[2023-06-28T12:39:18.887070+03:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"main","authenticator":"App\\Security\\LoginFormAuthenticator"} []
[2023-06-28T12:39:18.887103+03:00] security.DEBUG: Guard authenticator does not support the request. {"firewall_key":"main","authenticator":"App\\Security\\LoginFormAuthenticator"} []
[2023-06-28T12:39:18.888551+03:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2023-06-28T12:39:18.889784+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2023-06-28T12:39:18.889886+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:158)"} []
[2023-06-28T12:39:18.889968+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:163)"} []
[2023-06-28T12:39:18.890025+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:168)"} []
[2023-06-28T12:39:18.890089+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2023-06-28T12:39:18.890144+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2023-06-28T12:39:18.890643+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/http-foundation/Response.php:1267)"} []
[2023-06-28T12:39:18.891403+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/web-profiler-bundle/EventListener/WebDebugToolbarListener.php:106)"} []
[2023-06-28T12:39:18.952467+03:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"c1465a"},"request_uri":"https://localhost:8000/_wdt/c1465a","method":"GET"} []
[2023-06-28T12:39:18.953163+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2023-06-28T12:39:18.953234+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:158)"} []
[2023-06-28T12:39:18.953298+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:163)"} []
[2023-06-28T12:39:18.953368+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:168)"} []
[2023-06-28T12:39:18.953434+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2023-06-28T12:39:18.953500+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2023-06-28T12:39:18.954544+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:34)"} []
[2023-06-28T12:39:18.954612+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:82)"} []
[2023-06-28T12:39:18.954672+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:105)"} []
[2023-06-28T12:39:18.954736+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:122)"} []
[2023-06-28T12:39:18.954803+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:62)"} []
[2023-06-28T12:39:18.954874+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:91)"} []
[2023-06-28T12:39:18.954941+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:99)"} []
[2023-06-28T12:39:18.955008+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:54)"} []
[2023-06-28T12:39:18.955106+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:41)"} []
[2023-06-28T12:39:18.955180+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:49)"} []
[2023-06-28T12:39:18.955251+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:57)"} []
[2023-06-28T12:39:18.955321+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:65)"} []
[2023-06-28T12:39:18.955394+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:73)"} []
[2023-06-28T12:39:18.955463+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:81)"} []
[2023-06-28T12:39:18.955534+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:89)"} []
[2023-06-28T12:39:18.955614+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:97)"} []
[2023-06-28T12:39:18.955769+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2023-06-28T12:39:18.955848+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2023-06-28T12:39:18.955950+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2023-06-28T12:39:18.956020+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2023-06-28T12:39:18.957263+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/http-foundation/Response.php:1267)"} []
[2023-06-28T12:39:19.984615+03:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"c1465a"},"request_uri":"https://localhost:8000/_wdt/c1465a","method":"GET"} []
[2023-06-28T12:39:19.985514+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2023-06-28T12:39:19.985615+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:158)"} []
[2023-06-28T12:39:19.985712+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:163)"} []
[2023-06-28T12:39:19.985792+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:168)"} []
[2023-06-28T12:39:19.985844+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2023-06-28T12:39:19.985889+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2023-06-28T12:39:19.986922+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:34)"} []
[2023-06-28T12:39:19.986983+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:82)"} []
[2023-06-28T12:39:19.987032+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:105)"} []
[2023-06-28T12:39:19.987074+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:122)"} []
[2023-06-28T12:39:19.987116+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:62)"} []
[2023-06-28T12:39:19.987157+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:91)"} []
[2023-06-28T12:39:19.987199+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:99)"} []
[2023-06-28T12:39:19.987241+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:54)"} []
[2023-06-28T12:39:19.987304+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:41)"} []
[2023-06-28T12:39:19.987346+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:49)"} []
[2023-06-28T12:39:19.987385+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:57)"} []
[2023-06-28T12:39:19.987425+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:65)"} []
[2023-06-28T12:39:19.987467+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:73)"} []
[2023-06-28T12:39:19.987506+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:81)"} []
[2023-06-28T12:39:19.987545+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:89)"} []
[2023-06-28T12:39:19.987586+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:97)"} []
[2023-06-28T12:39:19.987686+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2023-06-28T12:39:19.987732+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2023-06-28T12:39:19.987800+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2023-06-28T12:39:19.987842+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2023-06-28T12:39:19.993202+03:00] php.INFO: Deprecated: Return type of Twig\Markup::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Twig\\Markup::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/twig/twig/src/Markup.php:38)"} []
[2023-06-28T12:39:19.993271+03:00] php.INFO: Deprecated: Return type of Twig\Markup::jsonSerialize() should either be compatible with JsonSerializable::jsonSerialize(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Twig\\Markup::jsonSerialize() should either be compatible with JsonSerializable::jsonSerialize(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/twig/twig/src/Markup.php:43)"} []
[2023-06-28T12:39:19.996507+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/http-foundation/Response.php:1267)"} []
[2023-06-28T12:44:09.171344+03:00] request.INFO: Matched route "api_entrypoint". {"route":"api_entrypoint","route_parameters":{"_route":"api_entrypoint","_controller":"api_platform.action.entrypoint","_format":"","_api_respond":"true","index":"index"},"request_uri":"https://localhost:8000/api","method":"GET"} []
[2023-06-28T12:44:09.171945+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2023-06-28T12:44:09.172058+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2023-06-28T12:44:09.172195+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2023-06-28T12:44:09.172281+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2023-06-28T12:44:09.172418+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:34)"} []
[2023-06-28T12:44:09.172511+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:82)"} []
[2023-06-28T12:44:09.172585+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:105)"} []
[2023-06-28T12:44:09.172660+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:122)"} []
[2023-06-28T12:44:09.172736+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:62)"} []
[2023-06-28T12:44:09.172811+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:91)"} []
[2023-06-28T12:44:09.172882+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:99)"} []
[2023-06-28T12:44:09.172936+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:54)"} []
[2023-06-28T12:44:09.173209+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:41)"} []
[2023-06-28T12:44:09.173276+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:49)"} []
[2023-06-28T12:44:09.173336+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:57)"} []
[2023-06-28T12:44:09.173411+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:65)"} []
[2023-06-28T12:44:09.173467+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:73)"} []
[2023-06-28T12:44:09.173522+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:81)"} []
[2023-06-28T12:44:09.173573+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:89)"} []
[2023-06-28T12:44:09.173629+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:97)"} []
[2023-06-28T12:44:09.174362+03:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"main","authenticators":1} []
[2023-06-28T12:44:09.174433+03:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"main","authenticator":"App\\Security\\LoginFormAuthenticator"} []
[2023-06-28T12:44:09.174475+03:00] security.DEBUG: Guard authenticator does not support the request. {"firewall_key":"main","authenticator":"App\\Security\\LoginFormAuthenticator"} []
[2023-06-28T12:44:09.189171+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/routing/RouteCollection.php:59)"} []
[2023-06-28T12:44:09.189269+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/routing/RouteCollection.php:69)"} []
[2023-06-28T12:44:09.189585+03:00] php.INFO: User Deprecated: Since symfony/framework-bundle 5.1: Using type "Symfony\Component\Routing\RouteCollectionBuilder" for argument 1 of method "App\Kernel:configureRoutes()" is deprecated, use "Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator" instead. {"exception":"[object] (ErrorException(code: 0): User Deprecated: Since symfony/framework-bundle 5.1: Using type \"Symfony\\Component\\Routing\\RouteCollectionBuilder\" for argument 1 of method \"App\\Kernel:configureRoutes()\" is deprecated, use \"Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator\" instead. at /var/www/html/vue/vendor/symfony/framework-bundle/Kernel/MicroKernelTrait.php:168)"} []
[2023-06-28T12:44:09.190186+03:00] php.INFO: User Deprecated: Since symfony/routing 5.1: The "Symfony\Component\Routing\RouteCollectionBuilder" class is deprecated, use "Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator" instead. {"exception":"[object] (ErrorException(code: 0): User Deprecated: Since symfony/routing 5.1: The \"Symfony\\Component\\Routing\\RouteCollectionBuilder\" class is deprecated, use \"Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator\" instead. at /var/www/html/vue/vendor/symfony/routing/RouteCollectionBuilder.php:19)"} []
[2023-06-28T12:44:09.201868+03:00] php.INFO: Deprecated: Return type of ApiPlatform\Core\Metadata\Property\PropertyNameCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of ApiPlatform\\Core\\Metadata\\Property\\PropertyNameCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/api-platform/core/src/Metadata/Property/PropertyNameCollection.php:39)"} []
[2023-06-28T12:44:09.201991+03:00] php.INFO: Deprecated: Return type of ApiPlatform\Core\Metadata\Property\PropertyNameCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of ApiPlatform\\Core\\Metadata\\Property\\PropertyNameCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/api-platform/core/src/Metadata/Property/PropertyNameCollection.php:47)"} []
[2023-06-28T12:44:09.217044+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::exec($sql) should either be compatible with PDO::exec(string $statement): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::exec($sql) should either be compatible with PDO::exec(string $statement): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:49)"} []
[2023-06-28T12:44:09.217161+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::lastInsertId($name = null) should either be compatible with PDO::lastInsertId(?string $name = null): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::lastInsertId($name = null) should either be compatible with PDO::lastInsertId(?string $name = null): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:98)"} []
[2023-06-28T12:44:09.217220+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::prepare($sql, $driverOptions = []) should either be compatible with PDO::prepare(string $query, array $options = []): PDOStatement|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::prepare($sql, $driverOptions = []) should either be compatible with PDO::prepare(string $query, array $options = []): PDOStatement|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:75)"} []
[2023-06-28T12:44:09.217274+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::quote($value, $type = Doctrine\DBAL\ParameterType::STRING) should either be compatible with PDO::quote(string $string, int $type = PDO::PARAM_STR): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::quote($value, $type = Doctrine\\DBAL\\ParameterType::STRING) should either be compatible with PDO::quote(string $string, int $type = PDO::PARAM_STR): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:90)"} []
[2023-06-28T12:44:09.217327+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOQueryImplementation::query(?string $query = null, ?int $fetchMode = null, mixed ...$fetchModeArgs) should either be compatible with PDO::query(string $query, ?int $fetchMode = null, mixed ...$fetchModeArgs): PDOStatement|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOQueryImplementation::query(?string $query = null, ?int $fetchMode = null, mixed ...$fetchModeArgs) should either be compatible with PDO::query(string $query, ?int $fetchMode = null, mixed ...$fetchModeArgs): PDOStatement|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOQueryImplementation.php:20)"} []
[2023-06-28T12:44:09.218803+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::bindParam($param, &$variable, $type = Doctrine\DBAL\ParameterType::STRING, $length = null, $driverOptions = null) should either be compatible with PDOStatement::bindParam(string|int $param, mixed &$var, int $type = PDO::PARAM_STR, int $maxLength = 0, mixed $driverOptions = null): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::bindParam($param, &$variable, $type = Doctrine\\DBAL\\ParameterType::STRING, $length = null, $driverOptions = null) should either be compatible with PDOStatement::bindParam(string|int $param, mixed &$var, int $type = PDO::PARAM_STR, int $maxLength = 0, mixed $driverOptions = null): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:82)"} []
[2023-06-28T12:44:09.218920+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::bindValue($param, $value, $type = Doctrine\DBAL\ParameterType::STRING) should either be compatible with PDOStatement::bindValue(string|int $param, mixed $value, int $type = PDO::PARAM_STR): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::bindValue($param, $value, $type = Doctrine\\DBAL\\ParameterType::STRING) should either be compatible with PDOStatement::bindValue(string|int $param, mixed $value, int $type = PDO::PARAM_STR): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:62)"} []
[2023-06-28T12:44:09.218977+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::closeCursor() should either be compatible with PDOStatement::closeCursor(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::closeCursor() should either be compatible with PDOStatement::closeCursor(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:98)"} []
[2023-06-28T12:44:09.219029+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::execute($params = null) should either be compatible with PDOStatement::execute(?array $params = null): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::execute($params = null) should either be compatible with PDOStatement::execute(?array $params = null): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:112)"} []
[2023-06-28T12:44:09.219081+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::fetch($fetchMode = null, $cursorOrientation = PDO::FETCH_ORI_NEXT, $cursorOffset = 0) should either be compatible with PDOStatement::fetch(int $mode = PDO::FETCH_DEFAULT, int $cursorOrientation = PDO::FETCH_ORI_NEXT, int $cursorOffset = 0): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::fetch($fetchMode = null, $cursorOrientation = PDO::FETCH_ORI_NEXT, $cursorOffset = 0) should either be compatible with PDOStatement::fetch(int $mode = PDO::FETCH_DEFAULT, int $cursorOrientation = PDO::FETCH_ORI_NEXT, int $cursorOffset = 0): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:126)"} []
[2023-06-28T12:44:09.219150+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::fetchColumn($columnIndex = 0) should either be compatible with PDOStatement::fetchColumn(int $column = 0): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::fetchColumn($columnIndex = 0) should either be compatible with PDOStatement::fetchColumn(int $column = 0): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:146)"} []
[2023-06-28T12:44:09.219202+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatementImplementations::fetchAll($mode = null, ...$args) should either be compatible with PDOStatement::fetchAll(int $mode = PDO::FETCH_DEFAULT, mixed ...$args): array, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatementImplementations::fetchAll($mode = null, ...$args) should either be compatible with PDOStatement::fetchAll(int $mode = PDO::FETCH_DEFAULT, mixed ...$args): array, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatementImplementations.php:36)"} []
[2023-06-28T12:44:09.344149+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2023-06-28T12:44:09.344231+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:158)"} []
[2023-06-28T12:44:09.344281+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:163)"} []
[2023-06-28T12:44:09.344333+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:168)"} []
[2023-06-28T12:44:09.344376+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2023-06-28T12:44:09.344420+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2023-06-28T12:44:09.344887+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/http-foundation/Response.php:1267)"} []
[2023-06-28T12:44:09.345481+03:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2023-06-28T12:44:09.345884+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/web-profiler-bundle/EventListener/WebDebugToolbarListener.php:106)"} []
[2023-06-28T12:44:09.557272+03:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"50681f"},"request_uri":"https://localhost:8000/_wdt/50681f","method":"GET"} []
[2023-06-28T12:44:09.558042+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2023-06-28T12:44:09.558125+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:158)"} []
[2023-06-28T12:44:09.558198+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:163)"} []
[2023-06-28T12:44:09.558264+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:168)"} []
[2023-06-28T12:44:09.558329+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2023-06-28T12:44:09.558391+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2023-06-28T12:44:09.559522+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:34)"} []
[2023-06-28T12:44:09.559590+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:82)"} []
[2023-06-28T12:44:09.559637+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:105)"} []
[2023-06-28T12:44:09.559680+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:122)"} []
[2023-06-28T12:44:09.559724+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:62)"} []
[2023-06-28T12:44:09.559767+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:91)"} []
[2023-06-28T12:44:09.559811+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:99)"} []
[2023-06-28T12:44:09.559868+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:54)"} []
[2023-06-28T12:44:09.559929+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:41)"} []
[2023-06-28T12:44:09.559972+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:49)"} []
[2023-06-28T12:44:09.560013+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:57)"} []
[2023-06-28T12:44:09.560057+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:65)"} []
[2023-06-28T12:44:09.560097+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:73)"} []
[2023-06-28T12:44:09.560138+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:81)"} []
[2023-06-28T12:44:09.560178+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:89)"} []
[2023-06-28T12:44:09.560222+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:97)"} []
[2023-06-28T12:44:09.560321+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2023-06-28T12:44:09.560369+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2023-06-28T12:44:09.560435+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2023-06-28T12:44:09.560479+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2023-06-28T12:44:09.573468+03:00] php.INFO: Deprecated: Return type of Twig\Markup::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Twig\\Markup::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/twig/twig/src/Markup.php:38)"} []
[2023-06-28T12:44:09.573613+03:00] php.INFO: Deprecated: Return type of Twig\Markup::jsonSerialize() should either be compatible with JsonSerializable::jsonSerialize(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Twig\\Markup::jsonSerialize() should either be compatible with JsonSerializable::jsonSerialize(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/twig/twig/src/Markup.php:43)"} []
[2023-06-28T12:44:09.578545+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/http-foundation/Response.php:1267)"} []
[2023-06-28T12:44:21.022007+03:00] request.INFO: Matched route "api_products_get_collection". {"route":"api_products_get_collection","route_parameters":{"_route":"api_products_get_collection","_controller":"api_platform.action.get_collection","_format":null,"_api_resource_class":"App\\Entity\\Product","_api_collection_operation_name":"get"},"request_uri":"https://localhost:8000/api/products?page=1","method":"GET"} []
[2023-06-28T12:44:21.023432+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::exec($sql) should either be compatible with PDO::exec(string $statement): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::exec($sql) should either be compatible with PDO::exec(string $statement): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:49)"} []
[2023-06-28T12:44:21.023511+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::lastInsertId($name = null) should either be compatible with PDO::lastInsertId(?string $name = null): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::lastInsertId($name = null) should either be compatible with PDO::lastInsertId(?string $name = null): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:98)"} []
[2023-06-28T12:44:21.023563+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::prepare($sql, $driverOptions = []) should either be compatible with PDO::prepare(string $query, array $options = []): PDOStatement|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::prepare($sql, $driverOptions = []) should either be compatible with PDO::prepare(string $query, array $options = []): PDOStatement|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:75)"} []
[2023-06-28T12:44:21.023610+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOConnection::quote($value, $type = Doctrine\DBAL\ParameterType::STRING) should either be compatible with PDO::quote(string $string, int $type = PDO::PARAM_STR): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOConnection::quote($value, $type = Doctrine\\DBAL\\ParameterType::STRING) should either be compatible with PDO::quote(string $string, int $type = PDO::PARAM_STR): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOConnection.php:90)"} []
[2023-06-28T12:44:21.023662+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOQueryImplementation::query(?string $query = null, ?int $fetchMode = null, mixed ...$fetchModeArgs) should either be compatible with PDO::query(string $query, ?int $fetchMode = null, mixed ...$fetchModeArgs): PDOStatement|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOQueryImplementation::query(?string $query = null, ?int $fetchMode = null, mixed ...$fetchModeArgs) should either be compatible with PDO::query(string $query, ?int $fetchMode = null, mixed ...$fetchModeArgs): PDOStatement|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOQueryImplementation.php:20)"} []
[2023-06-28T12:44:21.024194+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::bindParam($param, &$variable, $type = Doctrine\DBAL\ParameterType::STRING, $length = null, $driverOptions = null) should either be compatible with PDOStatement::bindParam(string|int $param, mixed &$var, int $type = PDO::PARAM_STR, int $maxLength = 0, mixed $driverOptions = null): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::bindParam($param, &$variable, $type = Doctrine\\DBAL\\ParameterType::STRING, $length = null, $driverOptions = null) should either be compatible with PDOStatement::bindParam(string|int $param, mixed &$var, int $type = PDO::PARAM_STR, int $maxLength = 0, mixed $driverOptions = null): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:82)"} []
[2023-06-28T12:44:21.024260+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::bindValue($param, $value, $type = Doctrine\DBAL\ParameterType::STRING) should either be compatible with PDOStatement::bindValue(string|int $param, mixed $value, int $type = PDO::PARAM_STR): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::bindValue($param, $value, $type = Doctrine\\DBAL\\ParameterType::STRING) should either be compatible with PDOStatement::bindValue(string|int $param, mixed $value, int $type = PDO::PARAM_STR): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:62)"} []
[2023-06-28T12:44:21.024309+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::closeCursor() should either be compatible with PDOStatement::closeCursor(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::closeCursor() should either be compatible with PDOStatement::closeCursor(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:98)"} []
[2023-06-28T12:44:21.024356+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::execute($params = null) should either be compatible with PDOStatement::execute(?array $params = null): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::execute($params = null) should either be compatible with PDOStatement::execute(?array $params = null): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:112)"} []
[2023-06-28T12:44:21.024403+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::fetch($fetchMode = null, $cursorOrientation = PDO::FETCH_ORI_NEXT, $cursorOffset = 0) should either be compatible with PDOStatement::fetch(int $mode = PDO::FETCH_DEFAULT, int $cursorOrientation = PDO::FETCH_ORI_NEXT, int $cursorOffset = 0): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::fetch($fetchMode = null, $cursorOrientation = PDO::FETCH_ORI_NEXT, $cursorOffset = 0) should either be compatible with PDOStatement::fetch(int $mode = PDO::FETCH_DEFAULT, int $cursorOrientation = PDO::FETCH_ORI_NEXT, int $cursorOffset = 0): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:126)"} []
[2023-06-28T12:44:21.024448+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatement::fetchColumn($columnIndex = 0) should either be compatible with PDOStatement::fetchColumn(int $column = 0): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatement::fetchColumn($columnIndex = 0) should either be compatible with PDOStatement::fetchColumn(int $column = 0): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatement.php:146)"} []
[2023-06-28T12:44:21.024492+03:00] php.INFO: Deprecated: Return type of Doctrine\DBAL\Driver\PDOStatementImplementations::fetchAll($mode = null, ...$args) should either be compatible with PDOStatement::fetchAll(int $mode = PDO::FETCH_DEFAULT, mixed ...$args): array, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\DBAL\\Driver\\PDOStatementImplementations::fetchAll($mode = null, ...$args) should either be compatible with PDOStatement::fetchAll(int $mode = PDO::FETCH_DEFAULT, mixed ...$args): array, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/PDOStatementImplementations.php:36)"} []
[2023-06-28T12:44:21.025077+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2023-06-28T12:44:21.025136+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2023-06-28T12:44:21.025215+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2023-06-28T12:44:21.025260+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2023-06-28T12:44:21.025341+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:34)"} []
[2023-06-28T12:44:21.025388+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:82)"} []
[2023-06-28T12:44:21.025432+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:105)"} []
[2023-06-28T12:44:21.025478+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:122)"} []
[2023-06-28T12:44:21.025521+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\AbstractSessionHandler::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php:62)"} []
[2023-06-28T12:44:21.025565+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:91)"} []
[2023-06-28T12:44:21.025609+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:99)"} []
[2023-06-28T12:44:21.025652+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php:54)"} []
[2023-06-28T12:44:21.025718+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::open($savePath, $sessionName) should either be compatible with SessionHandlerInterface::open(string $path, string $name): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:41)"} []
[2023-06-28T12:44:21.025764+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::close() should either be compatible with SessionHandlerInterface::close(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:49)"} []
[2023-06-28T12:44:21.025808+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::read($sessionId) should either be compatible with SessionHandlerInterface::read(string $id): string|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:57)"} []
[2023-06-28T12:44:21.025850+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::write($sessionId, $data) should either be compatible with SessionHandlerInterface::write(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:65)"} []
[2023-06-28T12:44:21.025893+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::destroy($sessionId) should either be compatible with SessionHandlerInterface::destroy(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:73)"} []
[2023-06-28T12:44:21.025950+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::gc($maxlifetime) should either be compatible with SessionHandlerInterface::gc(int $max_lifetime): int|false, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:81)"} []
[2023-06-28T12:44:21.025993+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::validateId($sessionId) should either be compatible with SessionUpdateTimestampHandlerInterface::validateId(string $id): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:89)"} []
[2023-06-28T12:44:21.026037+03:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy::updateTimestamp($sessionId, $data) should either be compatible with SessionUpdateTimestampHandlerInterface::updateTimestamp(string $id, string $data): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/http-foundation/Session/Storage/Proxy/SessionHandlerProxy.php:97)"} []
[2023-06-28T12:44:21.026323+03:00] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"main","authenticators":1} []
[2023-06-28T12:44:21.026367+03:00] security.DEBUG: Checking support on guard authenticator. {"firewall_key":"main","authenticator":"App\\Security\\LoginFormAuthenticator"} []
[2023-06-28T12:44:21.026399+03:00] security.DEBUG: Guard authenticator does not support the request. {"firewall_key":"main","authenticator":"App\\Security\\LoginFormAuthenticator"} []
[2023-06-28T12:44:21.029106+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\ArrayCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\ArrayCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/ArrayCollection.php:277)"} []
[2023-06-28T12:44:21.029181+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\ArrayCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\ArrayCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/ArrayCollection.php:318)"} []
[2023-06-28T12:44:21.029237+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\ArrayCollection::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\ArrayCollection::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/ArrayCollection.php:167)"} []
[2023-06-28T12:44:21.029283+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\ArrayCollection::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\ArrayCollection::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/ArrayCollection.php:179)"} []
[2023-06-28T12:44:21.029328+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\ArrayCollection::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\ArrayCollection::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/ArrayCollection.php:189)"} []
[2023-06-28T12:44:21.029371+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\ArrayCollection::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\ArrayCollection::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/ArrayCollection.php:207)"} []
[2023-06-28T12:44:21.042902+03:00] php.INFO: Deprecated: Return type of Doctrine\ORM\Tools\Pagination\Paginator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\ORM\\Tools\\Pagination\\Paginator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Pagination/Paginator.php:119)"} []
[2023-06-28T12:44:21.043049+03:00] php.INFO: Deprecated: Return type of Doctrine\ORM\Tools\Pagination\Paginator::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\ORM\\Tools\\Pagination\\Paginator::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/orm/lib/Doctrine/ORM/Tools/Pagination/Paginator.php:137)"} []
[2023-06-28T12:44:21.056138+03:00] doctrine.DEBUG: SELECT p0_.id AS id_0, p0_.name AS name_1, p0_.description AS description_2, p0_.brand AS brand_3, p0_.weight AS weight_4, p0_.price AS price_5, p0_.stock_quantity AS stock_quantity_6, p0_.image_filename AS image_filename_7, p0_.category_id AS category_id_8 FROM product p0_ ORDER BY p0_.id ASC LIMIT 30 [] []
[2023-06-28T12:44:21.064081+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\AbstractLazyCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\AbstractLazyCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/AbstractLazyCollection.php:31)"} []
[2023-06-28T12:44:21.064174+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\AbstractLazyCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\AbstractLazyCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/AbstractLazyCollection.php:279)"} []
[2023-06-28T12:44:21.064227+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\AbstractLazyCollection::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\AbstractLazyCollection::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/AbstractLazyCollection.php:291)"} []
[2023-06-28T12:44:21.064275+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\AbstractLazyCollection::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\AbstractLazyCollection::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/AbstractLazyCollection.php:307)"} []
[2023-06-28T12:44:21.064361+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\AbstractLazyCollection::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\AbstractLazyCollection::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/AbstractLazyCollection.php:321)"} []
[2023-06-28T12:44:21.064442+03:00] php.INFO: Deprecated: Return type of Doctrine\Common\Collections\AbstractLazyCollection::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Doctrine\\Common\\Collections\\AbstractLazyCollection::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/doctrine/collections/lib/Doctrine/Common/Collections/AbstractLazyCollection.php:332)"} []
[2023-06-28T12:44:21.065465+03:00] php.INFO: Deprecated: Return type of ApiPlatform\Core\Metadata\Property\PropertyNameCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of ApiPlatform\\Core\\Metadata\\Property\\PropertyNameCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/api-platform/core/src/Metadata/Property/PropertyNameCollection.php:39)"} []
[2023-06-28T12:44:21.065553+03:00] php.INFO: Deprecated: Return type of ApiPlatform\Core\Metadata\Property\PropertyNameCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of ApiPlatform\\Core\\Metadata\\Property\\PropertyNameCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/api-platform/core/src/Metadata/Property/PropertyNameCollection.php:47)"} []
[2023-06-28T12:44:21.066708+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/routing/RouteCollection.php:59)"} []
[2023-06-28T12:44:21.066780+03:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/routing/RouteCollection.php:69)"} []
[2023-06-28T12:44:21.066872+03:00] php.INFO: User Deprecated: Since symfony/framework-bundle 5.1: Using type "Symfony\Component\Routing\RouteCollectionBuilder" for argument 1 of method "App\Kernel:configureRoutes()" is deprecated, use "Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator" instead. {"exception":"[object] (ErrorException(code: 0): User Deprecated: Since symfony/framework-bundle 5.1: Using type \"Symfony\\Component\\Routing\\RouteCollectionBuilder\" for argument 1 of method \"App\\Kernel:configureRoutes()\" is deprecated, use \"Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator\" instead. at /var/www/html/vue/vendor/symfony/framework-bundle/Kernel/MicroKernelTrait.php:168)"} []
[2023-06-28T12:44:21.066938+03:00] php.INFO: User Deprecated: Since symfony/routing 5.1: The "Symfony\Component\Routing\RouteCollectionBuilder" class is deprecated, use "Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator" instead. {"exception":"[object] (ErrorException(code: 0): User Deprecated: Since symfony/routing 5.1: The \"Symfony\\Component\\Routing\\RouteCollectionBuilder\" class is deprecated, use \"Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator\" instead. at /var/www/html/vue/vendor/symfony/routing/RouteCollectionBuilder.php:19)"} []
[2023-06-28T12:44:21.088291+03:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.hex_color AS hex_color_3 FROM color t0 INNER JOIN product_color ON t0.id = product_color.color_id WHERE product_color.product_id = ? [1] []
[2023-06-28T12:44:21.089818+03:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.hex_color AS hex_color_3 FROM color t0 INNER JOIN product_color ON t0.id = product_color.color_id WHERE product_color.product_id = ? [2] []
[2023-06-28T12:44:21.090342+03:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.hex_color AS hex_color_3 FROM color t0 INNER JOIN product_color ON t0.id = product_color.color_id WHERE product_color.product_id = ? [3] []
[2023-06-28T12:44:21.090823+03:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.hex_color AS hex_color_3 FROM color t0 INNER JOIN product_color ON t0.id = product_color.color_id WHERE product_color.product_id = ? [4] []
[2023-06-28T12:44:21.091235+03:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.hex_color AS hex_color_3 FROM color t0 INNER JOIN product_color ON t0.id = product_color.color_id WHERE product_color.product_id = ? [5] []
[2023-06-28T12:44:21.093014+03:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.hex_color AS hex_color_3 FROM color t0 INNER JOIN product_color ON t0.id = product_color.color_id WHERE product_color.product_id = ? [6] []
[2023-06-28T12:44:21.093538+03:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.hex_color AS hex_color_3 FROM color t0 INNER JOIN product_color ON t0.id = product_color.color_id WHERE product_color.product_id = ? [7] []
[2023-06-28T12:44:21.094088+03:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.hex_color AS hex_color_3 FROM color t0 INNER JOIN product_color ON t0.id = product_color.color_id WHERE product_color.product_id = ? [8] []
[2023-06-28T12:44:21.094578+03:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.hex_color AS hex_color_3 FROM color t0 INNER JOIN product_color ON t0.id = product_color.color_id WHERE product_color.product_id = ? [9] []
[2023-06-28T12:44:21.095047+03:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.hex_color AS hex_color_3 FROM color t0 INNER JOIN product_color ON t0.id = product_color.color_id WHERE product_color.product_id = ? [10] []
[2023-06-28T12:44:21.095433+03:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.hex_color AS hex_color_3 FROM color t0 INNER JOIN product_color ON t0.id = product_color.color_id WHERE product_color.product_id = ? [11] []
[2023-06-28T12:44:21.095808+03:00] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.hex_color AS hex_color_3 FROM color t0 INNER JOIN product_color ON t0.id = product_color.color_id WHERE product_color.product_id = ? [12] []
[2023-06-28T12:44:21.096383+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2023-06-28T12:44:21.096460+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:158)"} []
[2023-06-28T12:44:21.096510+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:163)"} []
[2023-06-28T12:44:21.096555+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:168)"} []
[2023-06-28T12:44:21.096598+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2023-06-28T12:44:21.096642+03:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /var/www/html/vue/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2023-06-28T12:44:21.097301+03:00] php.INFO: Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: stripos(): Passing null to parameter #1 ($haystack) of type string is deprecated at /var/www/html/vue/vendor/symfony/http-foundation/Response.php:1267)"} []
[2023-06-28T12:44:21.098131+03:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
